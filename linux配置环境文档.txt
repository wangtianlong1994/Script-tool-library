1.先降ubuntu系统内核，以适配io板
2.先执行安装显卡需要的环境以及包并禁用核显后，！！！不安装显卡驱动，直接安装cuda
3.安装tensorrt
4.安装opencv
5.使用tensorrt生成引擎


安装cudnn
https://zhuanlan.zhihu.com/p/126997172
如果报错
sudo apt-get install libfreeimage3 libfreeimage-dev


1.先执行安装显卡需要的环境以及包并禁用核显后，！！！不安装显卡驱动，直接安装cuda
sudo apt install make cmake gcc g++ python-pip
sudo apt install make git vim wget cmake
sudo gedit /etc/modprobe.d/blacklist.conf
最后一行加上: blacklist nouveau 
sudo update-initramfs -u
重启



2.安装cuda

sudo dpkg -i cuda-repo-ubuntu1804-11-1-local_11.1.0-455.23.05-1_amd64.deb
sudo apt-key add /var/cuda-repo-ubuntu1804-11-1-local/7fa2af80.pub
sudo apt-get update
sudo apt-get install cuda

sudo gedit ~/.bashrc
写入
export PATH="/usr/local/cuda-11.1/bin:$PATH"
export LD_LIBRARY_PATH="/usr/local/cuda-11.1/lib64:$LD_LIBRARY_PATH"
source ~/.bashrc



3.安装tensorrt
https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html
命令
sudo dpkg -i nv-tensorrt-repo-ubuntu1804-cuda11.1-trt7.2.3.4-ga-20210226_1-1_amd64.deb
sudo apt-key add /var/nv-tensorrt-repo-ubuntu1804-cuda11.1-trt7.2.3.4-ga-20210226/7fa2af80.pub
sudo apt-get update
sudo apt-get install tensorrt

4.安装opencv
https://blog.csdn.net/z1026544682/article/details/114225729

1.去官网下载opencv，在本教程中选用的时opencv4.5.1，其他版本的配置方法异曲同工。
下载链接http://opencv.org/releases.html，选择sources版本

2.解压下载下来的tar包

opencv-4.5.2.tar.gz

3.进入到解压后的文件包中

4.安装依赖库和cmake ，如果提醒需要apt-get update，那就先sudo su进入root权限，再sudo apt-get update，然后在执行下面命令

sudo apt-get install cmake  
sudo apt-get install build-essential libavcodec-dev libavformat-dev libswscale-dev  libgtk-3-dev
sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"
sudo apt update
sudo apt install libjasper1 libjasper-dev
sudo apt-get install libjasper-dev libjpeg.dev libtiff4.dev


5.安装完cmake之后执行命令 ,创建编译文件夹

mkdir my_build_dir
cd my_build_dir


6.cmake一下

cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_FFMPEG=ON ..

注意：如果已经在新的文件夹中编译，但是还会出现之前的报错，把cmakecache.txt删了再编译就可

期间可能会下载一个东西，等待一会儿就OK


7.执行命令，漫长的编译过程

sudo make


8.执行命令

sudo make install


9.sudo make install 执行完毕后OpenCV编译过程就结束了，接下来就需要配置一些OpenCV的编译环境首先将OpenCV的库添加到路径，从而可以让系统找到

sudo gedit /etc/ld.so.conf.d/opencv.conf 

执行此命令后打开的可能是一个空白的文件，不用管，只需要在文件末尾添加

/usr/local/lib  


10.执行如下命令使得刚才的配置路径生效

sudo ldconfig  


这个时候可能会提示错误如下图所示（上部分）

sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 不是符号连接
/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 不是符号连接
出现这个错误可能是由于系统BUG所致

只需要分别输入上面图下部分的四行命令就可解决
sudo mv /usr/lib/nvidia-375/libEGL.so.1 /usr/lib/nvidia-375/libEGL.so.1.org
sudo mv /usr/lib32/nvidia-375/libEGL.so.1 /usr/lib32/nvidia-375/libEGL.so.1.org
sudo ln -s /usr/lib/nvidia-375/libEGL.so.375.39 /usr/lib/nvidia-375/libEGL.so.1
sudo ln -s /usr/lib32/nvidia-375/libEGL.so.375.39 /usr/lib32/nvidia-375/libEGL.so.1

11.配置bash

sudo gedit /etc/bash.bashrc  

在最末尾添加

PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  
export PKG_CONFIG_PATH  

保存，执行如下命令使得配置生效

source /etc/bash.bashrc  

更新

sudo updatedb  

12.至此所有的配置都已经完成
下面用一个小程序测试一下

找到
cd到opencv-3.4.1/samples/cpp/example_cmake目录下
我们可以看到这个目录里官方已经给出了一个cmake的example我们可以拿来测试下
按顺序执行

cmake .
make
./opencv_example



